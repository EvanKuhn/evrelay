This is my own re-implementation of carbon-relay, in C.

My goal is to make this as fast as possible, especially for aggregaations,
via a proper threading model that can scale to any reasonable number of
cores on a machine (eg: 32 cores). Poor threading models will lead to
contention during aggregation, thus limiting the amount of parallelism
attained by the service (i.e. it won't scale beyond 2 or 3 cores).

This is also a bit of a hacking project as I haven't coded in C for a
while!

Things to think about:
- threading model
- make vs cmake
- event-driven programming: how? library?
- lockless queues
- C hash tables (libcfu, uthash, etc)

Resources
- libuv downloads: http://dist.libuv.org/dist/
- libuv book: https://nikhilm.github.io/uvbook/index.html


TODO:
[X] need hash table impl
[ ] write testing framework with nu_unit
[ ] write yaml-parsing code
[ ] C style guide
[X] investigate libcfu (git@github.com:codebrainz/libcfu.git)

CLEANUP:
[ ] remove libcfu tarfile and related code
[ ] build tests in the main makefile; don't need multiple makefiles


Parsing YAML is confusing.

- If its the start of a doc, read the next token to get the root node type:
  - seq, map, or scalar
- If the current node is a map, read the next two tokens (key/value pair) and add them to the map
  - If the value is a map or seq, set it to the curr node
- If the current node is a sequence, read the next node and add it
  - If map or seq, set it to curr
